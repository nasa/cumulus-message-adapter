# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1
references:
  container_python312: &container_python312
    docker:
      - image: cimg/python:3.12.11
      - name: localstack
        image: localstack/localstack:2.0.2
    working_directory: ~/repo

  container_lambda_python312: &container_lambda_python312
    docker:
      - image: amazon/aws-lambda-python:3.12
    working_directory: ~/repo

  restore_cache_python312: &restore_cache_python312
    restore_cache:
      keys:
        - v2-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "requirements-dev.txt" }}
        # fallback to using the latest cache if no exact match is found
        - v2-dependencies-

  save_cache_python312: &save_cache_python312
    save_cache:
      paths:
        - ~/venv312
      key: v2-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "requirements-dev.txt" }}

jobs:
  build_python312:
    <<: *container_python312
    steps:
      - checkout
      - *restore_cache_python312
      - run:
          name: install dependencies
          command: |
            virtualenv ~/venv312
            . ~/venv312/bin/activate
            pip install -r requirements.txt
            pip install -r requirements-dev.txt
            pip install .
      - *save_cache_python312
      - run:
          name: run tests
          environment:
            LOCALSTACK_HOST: localstack
          command: |
            . ~/venv312/bin/activate
            python -m pylint --rcfile=.pylintrc -j 0 __main__.py ./message_adapter/
            CUMULUS_ENV=testing nose2 -v

  publish_github:
    <<: *container_lambda_python312
    steps:
      - checkout
      - add_ssh_keys
      - run:
          name: Tag, release, deploy release asset
          environment:
            GIT_PATH: nasa/cumulus-message-adapter
            GIT_API_URL: https://api.github.com/repos
            ZIPFILENAME: cumulus-message-adapter.zip
          command: |
            dnf update -y && dnf install -y zip openssh-clients git make jq binutils findutils libxcrypt-compat
            dnf swap -y coreutils-single-8.32-30.amzn2023.0.3.x86_64 coreutils
            mkdir -p ~/.ssh
            ssh-keyscan github.com >> ~/.ssh/known_hosts
            VERSION=`awk -F\' '{print $2,$4}' message_adapter/version.py`
            # Only tag and release if the version doesn't already exist
            if [ -z $(git ls-remote --tags origin | grep $VERSION) ]; then
              git tag $VERSION
              echo "Pushing tag ${VERSION}"
              git push https://${CUMULUSGIT_GITHUB_API_ACCESS_TOKEN}@github.com/nasa/cumulus-message-adapter.git --tags
              # strip white space from create release request body
              CREATE_RELEASE_REQUEST_BODY=$(echo '{"tag_name": "'$VERSION'", "name": "'$VERSION'"}' | tr -d '[:space:]')
              echo "Creating release for tag ${VERSION}"
              curl -X POST -u etcart:$CUMULUSGIT_GITHUB_API_ACCESS_TOKEN \
                  $GIT_API_URL/$GIT_PATH/releases \
                  --data $CREATE_RELEASE_REQUEST_BODY | jq .
              echo "Building ${ZIPFILENAME}"
              pip install --user virtualenv
              ~/.local/bin/virtualenv ~/venv312
              . ~/venv312/bin/activate
              pip install .
              make clean
              make $ZIPFILENAME
              if [ -f $ZIPFILENAME ]; then
                UPLOAD_URL_TEMPLATE=$(curl $GIT_API_URL/$GIT_PATH/releases/tags/$VERSION | jq '.upload_url' --raw-output)
                UPLOAD_URL=${UPLOAD_URL_TEMPLATE//{?name,label\}/?name=$ZIPFILENAME}
                echo "Uploading release to ${UPLOAD_URL}"
                curl -X POST -u etcart:$CUMULUSGIT_GITHUB_API_ACCESS_TOKEN \
                  -H "Content-Type: application/zip" \
                  $UPLOAD_URL \
                  --data-binary @./$ZIPFILENAME | jq .
              else
                 echo "$ZIPFILENAME does not exist."
                 exit 1
              fi
            fi

  publish_pypi:
    <<: *container_lambda_python312
    steps:
      - checkout
      - *restore_cache_python312
      - run:
          name: Deploy to PyPi
          command: |
            pip install --user virtualenv
            ~/.local/bin/virtualenv ~/venv312
            . ~/venv312/bin/activate
            pip install twine
            python setup.py sdist
            twine upload --skip-existing --username "${PYPI_USER}" --password "${PYPI_PASS}" dist/*

workflows:
  version: 2
  build_test_publish:
    jobs:
      - build_python312
      - publish_github:
          requires:
            - build_python312
          filters:
            branches:
              only: master
      - publish_pypi:
          requires:
            - publish_github
          filters:
            branches:
              only: master
